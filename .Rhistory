DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fill", "#00FFFF", "node"));
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fill", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("textcolor", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("fontcolor", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#00FFFF", "node"));DiagrammeR::render_graph(miniGraph)
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"));DiagrammeR::render_graph(miniGraph)
devtools::document()
?apply_graph_theme
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#FF0000", "node"));
plot(miniGraph)
render(miniGraph)
render_graph(miniGraph)
DiagrammeR::render_graph(miniGraph)
cat('\u2026')
devtools::document()
?data.tree::`data.tree-package`
devtools::document()
devtools::document()
source('B:/Data/R/rock/R/rock_example_1.R')
devtools::document()
devtools::document()
devtools::document()
?dplyr::`dplyr-package`
devtools::document()
source('B:/Data/R/rock/R/parse_source.R')
?head
source('B:/Data/R/rock/R/parse_source.R')
?setNames
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
cat('\u2026')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---
', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
---
', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#FF0000", "node"));
DiagrammeR::render_graph(miniGraph);
devtools::document()
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
-
id: childCode3
label: Child Code
parentId: parentCode
children: ['grandChild1', 'grandChild2']
---
', split="\n", fixed=TRUE))
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
-
id: childCode3
label: Child Code
parentId: parentCode
children: ['grandChild1', 'grandChild2']
---
', split="\n", fixed=TRUE));
devtools::document()
?apply_graph_theme
exampleSource <- unlist(strsplit('
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
-
id: childCode3
label: Child Code
parentId: parentCode
children: [grandChild1, grandChild2]
---
', split="\n", fixed=TRUE));
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#FF0000", "node"));
### This line should be run when executing this example as test, because
### rendering a DiagrammeR graph takes quite long
## Not run:
DiagrammeR::render_graph(miniGraph);
## End(Not run)
'
parsedSource$deductiveCodeTrees
parsedSource$deductiveCodes
source('B:/Data/R/rock/R/parse_source.R')
devtools::document()
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_source.R')
devtools::document()
install.packages('roxygen2')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
devtools::document()
cat('\u2026')
devtools::document()
source('B:/Data/R/rock/R/parse_sources.R')
?file.path
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_sources.R')
source('B:/Data/R/rock/R/parse_source.R')
?apply_graph_theme
exampleSource <- '
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
-
id: childCode3
label: Child Code
parentId: parentCode
children: [grandChild1, grandChild2]
---
';
exampleSource <- '
---
codes:
-
id: parentCode
label: Parent code
children:
-
id: childCode1
-
id: childCode2
-
id: childCode3
label: Child Code
parentId: parentCode
children: [grandChild1, grandChild2]
---
';
parsedSource <-
parse_source(text=exampleSource);
miniGraph <-
apply_graph_theme(data.tree::ToDiagrammeRGraph(parsedSource$deductiveCodeTrees),
c("color", "#0000AA", "node"),
c("shape", "triangle", "node"),
c("fontcolor", "#FF0000", "node"));
parsedSource$deductiveCodeTrees
parsedSource$deductiveCodeTree
parsedSource$arguments$text
cat(parsedSource$arguments$text)
parsedSource$codings
parsedSource$rawCodings
parsedSource$inductiveCodeProcessing
parsedSource$inductiveCodeTrees
install.packages("B:/Data/R/yum_0.0.1.tar.gz", repos = NULL, type = "source")
pkgdown::build_site()
source('B:/Data/R/rock/R/parse_source.R')
usethis::use_coverage()
devtools::load_all(".")
devtools::document()
pkgdown::build_site()
yum::extract_yaml_fragments
source('B:/Data/R/rock/R/parse_source.R')
library(rock)
workingPath <- "B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA";
# x <- readLines("B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA/arena/sylvias-test.rock");
# y <- parse_source(x);
#
# x2 <- readLines("B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA/arena/second-test-file.rock");
# y2 <- parse_source(x2);
#
# enaTest <- parse_sources(path="B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA/arena");
#
# dctTest <- parse_sources('B:/Data/research/decentralized-construct-taxonomy/dct-files');
#
# print(z$codeTree, 'code', 'label');
#
# clean_transcript(input=file.path(workingPath, "test", "P.I.int.txt"),
#                  outputFile=file.path(workingPath, "test", "P.I.int.rock"),
#                  extraReplacements=list(c("\\n-\\s", "\n---turn-of-talk---\n")));
parsedSource <-
rock::parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
file.path(workingPath,
'test',
'P.I.int-coded.rock')
file.exists(file.path(workingPath,
'test',
'P.I.int-coded.rock'))
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
parsedSource
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
yum::extract_yaml_fragments(
yum::extract_yaml_fragments
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
parsedSource <-
rock::parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
workingPath <- "B:/Data/research/qualitative-quantitative interfacing/Qualitative rENA";
parsedSource <-
rock::parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
parsedSource
names(parsedSource)
parsedSource$inductiveCodeProcessin
parsedSource$inductiveCodeTrees
plot(parsedSource$inductiveCodeTrees)
data.tree::plot(parsedSource$inductiveCodeTrees)
data.tree::plot.Node(parsedSource$inductiveCodeTrees)
parsedSource$inductiveCodeTrees
class(parsedSource$inductiveCodeTrees)
plot(parsedSource$inductiveCodeTrees$code)
data.tree::plot.Node(parsedSource$inductiveCodeTrees$code)
graphics::plot.Node(parsedSource$inductiveCodeTrees$code)
graphics::plot(parsedSource$inductiveCodeTrees$code)
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
parsedSource$inductiveCodeTrees
parsedSource
names(parsedSource$inductiveCodeTrees)
plot(parsedSource$inductiveCodeTrees['code']])
plot(parsedSource$inductiveCodeTrees[['code']])
source('B:/Data/R/rock/R/parse_source.R')
parsedSource
?UseMethod
UseMethod('plot', 'Node')
UseMethod(plot, Node)
UseMethod(plot, 'Node')
UseMethod(plot, parsedSource$inductiveCodeTrees[['code']])
source('B:/Data/R/rock/R/parse_source.R')
parsedSource
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
rock::parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
parsedSource
names(parsedSource)
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
rock::parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
parsedSource
parsedSource
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
source('B:/Data/R/rock/R/parse_source.R')
parsedSource
names(parsedSource$sourceDf)
parsedSource$sourceDf$paragraphs_counter
parsedSource$inductiveCodeTrees
parsedSource$inductiveCodeTrees$code
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
rock::parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
parsedSource$sourceDf$chaos
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
parsedSource$sourceDf$chaos
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
parsedSource$sourceDf$chaos
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'), silent=FALSE);
parsedSource$inductiveCodeProcessing
parsedSource$inductiveCodeProcessing$code$splitCodings
parsedSource$inductiveCodeProcessing$code$localBranches
parsedSource$inductiveCodeProcessing$code$localRoots
parsedSource$inductiveCodeProcessing$code$localRootsThatAreBranches
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'));
parsedSource
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'), persistentIds = "stanzaId");
parsedSource$inductiveCodeTrees
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'), persistentIds = "stanzaId");
parsedSource$inductiveCodeTrees
source('B:/Data/R/rock/R/parse_source.R')
parsedSource <-
parse_source(file.path(workingPath,
'test',
'P.I.int-coded.rock'), persistentIds = "stanzaId");
parsedSource$inductiveCodeTrees
parsedSource$sourceDf$stanzaId
?dplyr::count
a <- parsedSource$sourceDf[1:3, 10:20]
a
a <- parsedSource$sourceDf[30:40, 10:20]
a
a <- parsedSource$sourceDf[30:40, ]
a
a <- parsedSource$sourceDf[60:80, ]
a
a <- parsedSource$sourceDf[40:80, ]
a
a <- parsedSource$sourceDf[40:80, ]
count(a, 'stanzaId')
dplyr::count(a, 'stanzaId')
dplyr::count(a, wt='chaos', 'stanzaId')
dplyr::count(a, 'stanzaId', wt=chaos)
dplyr::count(a, 'stanzaId', wt=cam)
length(parsedSource$rawCodings)
length(parsedSource$rawCodings[[1]])
parsedSource$rawCodings[[1]]
parsedSource$inductiveCodeProcessing$code$inductiveLeaves
aggregate(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], by=a$stanzaId, FUN=rowSums)
aggregate(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], by=list(a$stanzaId), FUN=rowSums)
?aggregate
a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves]
aggregate(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], by=list(a$stanzaId), FUN=colSums)
aggregate(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], by=list(stanzaId=a$stanzaId), FUN=colSums)
aggregate(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], by=list(stanzaId=a$stanzaId), FUN=rowSums)
?tapply
tapply(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], stanzaId=a$stanzaId, FUN=rowSums)
tapply(X=a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], INDEX=a$stanzaId, FUN=rowSums)
tapply(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves[1]], stanzaId=a$stanzaId, FUN=rowSums)
tapply(X=a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves[1]], INDEX=a$stanzaId, FUN=rowSums)
tapply(X=a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves[1]], INDEX=a$stanzaId, FUN=sum)
tapply(X=a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves[2]], INDEX=a$stanzaId, FUN=sum)
tapply(X=a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves[3]], INDEX=a$stanzaId, FUN=sum)
tapply(X=a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves[4]], INDEX=a$stanzaId, FUN=sum)
lapply(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], tapply(INDEX=a$stanzaId, FUN=sum))
lapply(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], tapply, INDEX=a$stanzaId, FUN=sum)
lapply(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], tapply, INDEX=a$stanzaId, FUN=sum)
aggregate(do.call(cbind, parsedSource$inductiveCodeProcessing$code$inductiveLeaves) ~ stanzaId, data = a, sum, na.rm = TRUE)
aggregate(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], data.frame("stanzaId"), sum)
aggregate(a[, parsedSource$inductiveCodeProcessing$code$inductiveLeaves], data.frame(a$stanzaId), sum)
source('B:/Data/R/rock/R/parse_source.R')
parsedSource$codings
collapse_occurrences(parsedSource)
source('B:/Data/R/rock/R/collapse_occurrences.R')
collapse_occurrences(parsedSource)
source('B:/Data/R/rock/R/collapse_occurrences.R')
collapse_occurrences(parsedSource)
source('B:/Data/R/rock/R/collapse_occurrences.R')
collapsed <-
collapse_occurrences(parsedSource);
write.csv(collapsed,
file.path(workingPath,
"collapsed.csv"),
row.names=FALSE);
source('B:/Data/R/rock/R/collapse_occurrences.R')
pkgdown::build_site()
devtools::install_github("r-packages/yum")
devtools::install_gitlab("r-packages/yum")
testthat::test_check('rock')
install.packages("B:/Data/R/rock_0.0.1.tar.gz", repos = NULL, type = "source")
testthat::test_check('rock')
?testthat::test_check
?testthat::test_package('rock')
testthat::test_package('rock')
testthat::test_check('tests/testthat')
testthat::test_dir('tests/testthat')
testthat::test_dir('./tests/testthat')
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
