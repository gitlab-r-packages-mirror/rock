% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uncode_source.R
\name{uncode_source}
\alias{uncode_source}
\title{Remove one or more codes from a source}
\usage{
uncode_source(
  input,
  codes,
  filter = TRUE,
  output = NULL,
  childrenReplaceParents = TRUE,
  recursiveDeletion = TRUE,
  decisionLabel = NULL,
  justification = NULL,
  justificationFile = rock::opts$get("justificationFile"),
  preventOverwriting = rock::opts$get("preventOverwriting"),
  encoding = rock::opts$get("encoding"),
  silent = rock::opts$get("silent")
)
}
\arguments{
\item{input}{A file with a source (for \code{uncode_source}), or a directory
with sources (for \code{uncode_sources}), or an object with one source or
multiple sources as produced by one of the \code{loading_sources} functions.}

\item{codes}{A character vector with codes to remove.}

\item{output}{If specified, the coded source will be written here.}

\item{childrenReplaceParents}{Whether children should be deleted (\code{FALSE})
or take their parent code's place (\code{TRUE}).}

\item{recursiveDeletion}{Whether to also delete a code's parents (\code{TRUE}),
if they have no other children, and keep doing this until the root is
reached, or whether to leave parent codes alone (\code{FALSE}).}

\item{justification}{The justification for this action.}

\item{justificationFile}{If specified, the justification is appended to
this file. If not, it is saved to the \code{\link[justifier:workspace]{justifier::workspace()}}. This can
then be saved or displayed at the end of the R Markdown file or R script
using \code{\link[justifier:save_workspace]{justifier::save_workspace()}}.}

\item{preventOverwriting}{Whether to prevent overwriting existing files
when writing the files to \code{output}.}

\item{encoding}{The encoding to use.}

\item{silent}{Whether to be chatty or quiet.}
}
\value{
Invisibly, the recoded source(s) or source(s) object.
}
\description{
These functions remove one or more codes from a source, and make it easy to
justify that decision.
}
\examples{
### Get path to example source
examplePath <-
  system.file("extdata", package="rock");

### Get a path to one example file
exampleFile <-
  file.path(examplePath, "example-1.rock");

### Parse single example source
loadedExample <- rock::load_source(exampleFile);

}
