% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_sources.R
\name{merge_sources}
\alias{merge_sources}
\title{Merge source files by different coders}
\usage{
merge_sources(input, output, outputPrefix = "",
  outputSuffix = "_merged", primarySourcesRegex = ".*",
  primarySourcesIgnoreRegex = outputSuffix, primarySourcesPath = input,
  coderId = "\\\\[\\\\[coderId=([a-zA-Z0-9._-]+)\\\\]\\\\]",
  idForOmittedCoderIds = "noCoderId", codeRegexes = c(codes =
  "\\\\[\\\\[([a-zA-Z0-9._>-]+)\\\\]\\\\]"), idRegexes = c(caseId =
  "\\\\[\\\\[cid=([a-zA-Z0-9._-]+)\\\\]\\\\]", stanzaId =
  "\\\\[\\\\[sid=([a-zA-Z0-9._-]+)\\\\]\\\\]", coderId =
  "\\\\[\\\\[coderId=([a-zA-Z0-9._-]+)\\\\]\\\\]"),
  sectionRegexes = c(paragraphs = "---paragraph-break---", secondary =
  "---<[a-zA-Z0-9]?>---"),
  uidRegex = "\\\\[\\\\[uid=([a-zA-Z0-9._-]+)\\\\]\\\\]",
  autoGenerateIds = c("stanzaId"), persistentIds = c("caseId",
  "coderId"), noCodes = "^uid:|^uid=|^dct:|^ci:", recursive = TRUE,
  primarySourcesRecursive = recursive, filenameRegex = ".*",
  delimiterRegEx = "^---$", ignoreRegex = "^#", overwrite = FALSE,
  ignoreOddDelimiters = FALSE, postponeDeductiveTreeBuilding = TRUE,
  encoding = "UTF-8", silent = TRUE, inheritSilence = FALSE)
}
\arguments{
\item{input}{The directory containing the input sources.}

\item{output}{The path to the directory where to store the merged sources.
This path will be created with a warning if it does not exist. An exception
is if "\code{same}" is specified - in that case, every file will be written to the
same directory it was read from.}

\item{outputPrefix, outputSuffix}{A pre- and/or suffix to add to the filename
when writing the merged sources (especially useful when writing them to the
same directory).}

\item{primarySourcesRegex}{A regular expression that specifies how to
recognize the primary sources (i.e. the files used as the basis, to which
the codes from other sources are added).}

\item{primarySourcesIgnoreRegex}{A regular expression that specifies which
files to ignore as primary files.}

\item{primarySourcesPath}{The path containing the primary sources.}

\item{coderId}{A regular expression specifying the coder identifier, specified
similarly to the codeRegexes.}

\item{idForOmittedCoderIds}{The identifier to use for utterances that do not
have a coder id (i.e. utterance that occur in a source that does not specify
a coder id, or above the line where a coder id is specified).}

\item{codeRegexes}{These are named character vectors with one
or more regular expressions. For \code{codeRegexes}, these specify how to extract the codes
(that were used to code the sources). For \code{idRegexes}, these specify how to extract the
different types of identifiers. For \code{sectionRegexes}, these specify how to extract the
different types of sections. The \code{codeRegexes} and \code{idRegexes} must each contain one
capturing group to capture the codes and identifiers, respectively.}

\item{idRegexes}{These are named character vectors with one
or more regular expressions. For \code{codeRegexes}, these specify how to extract the codes
(that were used to code the sources). For \code{idRegexes}, these specify how to extract the
different types of identifiers. For \code{sectionRegexes}, these specify how to extract the
different types of sections. The \code{codeRegexes} and \code{idRegexes} must each contain one
capturing group to capture the codes and identifiers, respectively.}

\item{sectionRegexes}{These are named character vectors with one
or more regular expressions. For \code{codeRegexes}, these specify how to extract the codes
(that were used to code the sources). For \code{idRegexes}, these specify how to extract the
different types of identifiers. For \code{sectionRegexes}, these specify how to extract the
different types of sections. The \code{codeRegexes} and \code{idRegexes} must each contain one
capturing group to capture the codes and identifiers, respectively.}

\item{autoGenerateIds}{The names of the \code{idRegexes} that, if missing, should receive
autogenerated identifiers (which consist of 'autogenerated_' followed by an incrementing
number).}

\item{persistentIds}{The names of the \code{idRegexes} for the identifiers which, once
attached to an utterance, should be attached to all following utterances as well (until
a new identifier with the same name is encountered, after which that identifier will be
attached to all following utterances, etc).}

\item{noCodes}{This regular expression is matched with all codes after they have been
extracted using the \code{codeRegexes} regular expression (i.e. they're matched against the
codes themselves without, for example, the square brackets in the default code regex). Any
codes matching this \code{noCodes} regular expression will be \strong{ignored}, i.e., removed from the
list of codes.}

\item{recursive, primarySourcesRecursive}{Whether to read files from
sub-directories (\code{TRUE}) or not.}

\item{filenameRegex}{Only files matching this regular expression are read.}

\item{delimiterRegEx}{The regular expression that is used to extract the YAML fragments.}

\item{ignoreRegex}{The regular expression that is used to delete lines before any other
processing. This can be used to enable adding comments to sources, which are then ignored
during analysis.}

\item{overwrite}{Whether to overwrite existing files or not.}

\item{ignoreOddDelimiters}{If an odd number of YAML delimiters is encountered, whether this
should result in an error (\code{FALSE}) or just be silently ignored (\code{TRUE}).}

\item{postponeDeductiveTreeBuilding}{Whether to imediately try to build the deductive
tree(s) based on the information in this file (\code{FALSE}) or whether to skip that. Skipping
this is useful if the full tree information is distributed over multiple files (in which case
you should probably call \code{parse_sources} instead of \code{parse_source}).}

\item{encoding}{The encoding of the file to read (in \code{file}).}

\item{silent}{Whether to provide (\code{FALSE}) or suppress (\code{TRUE}) more detailed progress updates.}

\item{inheritSilence}{If not silent, whether to let functions called
by \code{merge_sources} inherit that setting.}
}
\value{
Invisibly, a list of the parsed, primary, and merged sources.
}
\description{
This function takes sets of sources and merges them using the utterance
identifiers (UIDs) to match them.
}
